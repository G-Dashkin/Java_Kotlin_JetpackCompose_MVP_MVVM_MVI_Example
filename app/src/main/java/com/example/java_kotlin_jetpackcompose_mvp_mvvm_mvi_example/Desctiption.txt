M - Model (уровень данных) - это наши классы(data-классы), для работы с сервером/данными/базой(и сама база данных)/репозиторий
V - View (уровень предтавления)- в данной архитектуре это Activity, Fragment, Custom View
----------------------------------------------------------------------------------------------------
MVVM // VM - ViewModel
----------------------
[ViewModel Х-> View] ViewModel не знает о View
[ViewModel -> Model] ViewModel знает о Model
[View -> ViewModel]  View знает о ViewModel (при этом вьюМодель находится внутри активити, чтобы активити могла подписываться на нее)
[Model Х-> ViewModel, Model Х-> View] Model не знает о ViewModel и View, она сама по себе
----------------------------------------------------------------------------------------------------
MVI // I - Intent
----------------------








----------------------------------------------------------------------------------------------------
MVP  // P - Presenter (посредник между Model и View) - Напрямую View и Model не взаимодействуют. Для этого используется Presenter.
----------------------
Главное отличие от MVVM (в MVVM ViewModel ничего не знает об активти, а активити имеет ссылку на ViewModel и может с ней что то делать)
В MVP активити имеет ссылку на Presenter и Presenter имеет ссылкку на активити (оба занют друг о друге)
Чтобы получить доступы только к нужным методам, создаются интерфейсы для активти и презентора.


[View -> Presenter]                     View знает о Presenter
[Presenter -> View, Presenter -> Model] Presenter знает о View и Model
[Model Х->Х Presenter, Model Х->Х View] Model не знает о Presenter и View, она сама по себе

Для реализации MVP в Android, создается дополнительная часть - Contract.
Это интерфейс, который описывает все взаимодействия между вышеперечисленными компонентами.
[Contract -> Presenter, Model, View] Contract регулирует взаимодействия между View, Presenter и Model.

Presenter имеет ссылки и на View, и на Model и обеспечивает взаимодействие между ними.
View(Activity) сообщает Презентору о действиях пользователя (например о нажатии на кнопку), но не
вызывает у презентора какие-либо действия. Presenter  сам решает, что надо делать при нажатии на кнопку.
Presenter запрашивает данные у модели (Model) и передает их в View(Activity)

Presenter может подписаться на обновление модели Model. Когда данные в базе изменяются, Presenter видит эти изменения в Model.
Presenter получает эти изменения и передает их во View(Activity)
----------------------------------------------------------------------------------------------------
MVC  // C - Controller - хранит код, который отвечает за обработку действий пользователя.
----------------------
Controller является соединением между пользователем и системой
Любое действие пользователя в системе обрабатывается в контроллере.

Есть два подхода к реализации контроллера
-пассивный вью (Passive View) -
-супервизор контроллер (Supervising Controller) -

[Model Х-> Controller, Model Х-> View] Model не знает о Controller и View, она сама по себе
[View -> Presenter]                      View знает о Presenter
[Presenter -> View, Presenter -> Model]  Presenter знает о View и Model
----------------------------------------------------------------------------------------------------